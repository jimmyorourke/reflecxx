#pragma once

#include "detail/proto_detail.hpp"

namespace proto {

// Wrapper to support template type deduction for type visitors (ie no instance argument passed to visit()).
// The specialized Acceptor struct will be autogenerated.
template <typename T, typename Visitor>
constexpr void visit(Visitor&& visitor) {
    detail::Acceptor<T, Visitor>::visitType(std::forward<Visitor>(visitor));
}

// Aliases for type and instance versions of visit function.
template <typename T, typename Visitor>
constexpr void forEachField(Visitor&& visitor) {
    visit<T>(std::forward<Visitor>(visitor));
}
template <typename T, typename Visitor>
constexpr void forEachField(T&& toVisit, Visitor&& visitor) {
    // The visit function overload will be autogenerated.
    visit(std::forward<T>(toVisit), std::forward<Visitor>(visitor));
}

// Type trait to identify visitable types (for which a visit function has been autogenerated).
template <typename T, typename SFINAE>
struct IsProtoVisitable;
template <typename T>
inline constexpr bool IsProtoVisitableV = IsProtoVisitable<T>::value;

} // namespace proto
