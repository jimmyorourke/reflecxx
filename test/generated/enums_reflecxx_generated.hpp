#pragma once

// Autogenerated at 2022-01-12 00:39:53.145521 by visitor_generator.py.
// Do not edit, changes will be overwritten!

#include <type_traits>

#include <reflecxx/reflecxx_base.hpp>

namespace reflecxx {

////////////////////////////////////////////////////////////
// test_types::Unscoped
////////////////////////////////////////////////////////////

template <>
struct MetaEnumInternal<test_types::Unscoped> {
    using Utype = std::underlying_type_t<test_types::Unscoped>;
    static constexpr std::array<Enumerator<test_types::Unscoped>, 4> enumerators = {{
        {test_types::Unscoped::First, "First", Utype{2}},
        {test_types::Unscoped::Second, "Second", Utype{3}},
        {test_types::Unscoped::Third, "Third", Utype{4}},
        {test_types::Unscoped::Fourth, "Fourth", Utype{5}},
    }};
};

////////////////////////////////////////////////////////////
// test_types::Scoped
////////////////////////////////////////////////////////////

template <>
struct MetaEnumInternal<test_types::Scoped> {
    using Utype = std::underlying_type_t<test_types::Scoped>;
    static constexpr std::array<Enumerator<test_types::Scoped>, 3> enumerators = {{
        {test_types::Scoped::First, "First", Utype{0}},
        {test_types::Scoped::Second, "Second", Utype{1}},
        {test_types::Scoped::Third, "Third", Utype{2}},
    }};
};

} // namespace reflecxx
