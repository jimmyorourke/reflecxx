#pragma once

// Autogenerated at 2021-12-09 00:26:14.588852 by visitor_generator.py.
// Do not edit, changes will be overwritten!

#include <type_traits>

#include <reflecxx/reflecxx_base.hpp>

namespace reflecxx {

////////////////////////////////////////////////////////////
// test_types::Unscoped
////////////////////////////////////////////////////////////

namespace detail {
template <typename Visitor>
struct Acceptor<test_types::Unscoped, Visitor> {
    static constexpr void visitType(Visitor&& visitor) {
        visitor(test_types::Unscoped::First, "First", std::underlying_type_t<test_types::Unscoped>{2});
        visitor(test_types::Unscoped::Second, "Second", std::underlying_type_t<test_types::Unscoped>{3});
        visitor(test_types::Unscoped::Third, "Third", std::underlying_type_t<test_types::Unscoped>{4});
        visitor(test_types::Unscoped::Fourth, "Fourth", std::underlying_type_t<test_types::Unscoped>{5});
    }
};
} // namespace detail

////////////////////////////////////////////////////////////
// test_types::Scoped
////////////////////////////////////////////////////////////

namespace detail {
template <typename Visitor>
struct Acceptor<test_types::Scoped, Visitor> {
    static constexpr void visitType(Visitor&& visitor) {
        visitor(test_types::Scoped::First, "First", std::underlying_type_t<test_types::Scoped>{0});
        visitor(test_types::Scoped::Second, "Second", std::underlying_type_t<test_types::Scoped>{1});
        visitor(test_types::Scoped::Third, "Third", std::underlying_type_t<test_types::Scoped>{2});
    }
};
} // namespace detail

} // namespace reflecxx
