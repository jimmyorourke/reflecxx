#pragma once

// Autogenerated at 2021-12-09 00:26:17.028490 by visitor_generator.py.
// Do not edit, changes will be overwritten!

#include <type_traits>

#include <reflecxx/reflecxx_base.hpp>

namespace reflecxx {

////////////////////////////////////////////////////////////
// test_types::BasicStruct
////////////////////////////////////////////////////////////

template <>
struct tuple_type<test_types::BasicStruct> {
    using type = std::tuple<bool, int, double>;
};

template <typename Visitor, typename T,
          std::enable_if_t<std::is_same_v<test_types::BasicStruct, std::remove_const_t<T>>, bool> = true>
constexpr void visit(T& toVisit, Visitor&& visitor) {
    visitor("b", toVisit.b);
    visitor("i", toVisit.i);
    visitor("d", toVisit.d);
}

namespace detail {
template <typename Visitor>
struct Acceptor<test_types::BasicStruct, Visitor> {
    static constexpr void visitType(Visitor&& visitor) {
        visitor("b", type_tag<bool>{});
        visitor("i", type_tag<int>{});
        visitor("d", type_tag<double>{});
    }
};
} // namespace detail

////////////////////////////////////////////////////////////
// test_types::NestingStruct
////////////////////////////////////////////////////////////

template <>
struct tuple_type<test_types::NestingStruct> {
    using type = std::tuple<int, double, test_types::BasicStruct, test_types::BasicStruct[3],
                            std::array<test_types::BasicStruct, 2>>;
};

template <typename Visitor, typename T,
          std::enable_if_t<std::is_same_v<test_types::NestingStruct, std::remove_const_t<T>>, bool> = true>
constexpr void visit(T& toVisit, Visitor&& visitor) {
    visitor("i", toVisit.i);
    visitor("d", toVisit.d);
    visitor("bs", toVisit.bs);
    visitor("basicsArr", toVisit.basicsArr);
    visitor("basicsStdarr", toVisit.basicsStdarr);
}

namespace detail {
template <typename Visitor>
struct Acceptor<test_types::NestingStruct, Visitor> {
    static constexpr void visitType(Visitor&& visitor) {
        visitor("i", type_tag<int>{});
        visitor("d", type_tag<double>{});
        visitor("bs", type_tag<test_types::BasicStruct>{});
        visitor("basicsArr", type_tag<test_types::BasicStruct[3]>{});
        visitor("basicsStdarr", type_tag<std::array<test_types::BasicStruct, 2>>{});
    }
};
} // namespace detail

} // namespace reflecxx
